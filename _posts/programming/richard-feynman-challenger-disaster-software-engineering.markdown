---
layout: post
status: publish
published: true
title: Richard Feynman, the Challenger Disaster, and Software Engineering
author: Gustavo Duarte
author_login: gduarte
author_email: gustavo-web@duartes.org
author_url: http://duartes.org/gustavo/blog
comments: false
wordpress_id: 12
wordpress_url: http://duartes.org/gustavo/blog/post.aspx?id=17ab51a7-3f90-4a28-b65e-c9488b1aaac4
date: 2008-02-20 05:33:00.000000000 -07:00
categories:
- Programming
tags: []
---
<p align="center"><img height="200" alt="Challenger Crew" src="http://static.duartes.org/img/blogPosts/250px-ChallengerCrew.jpg" width="250" /></p>  <p>On January 28th, 1986, <a href="http://en.wikipedia.org/wiki/Space_Shuttle_Challenger">Space Shuttle Challenger</a> was launched at 11:38am on the 6-day <a href="http://en.wikipedia.org/wiki/STS-51-L">STS-51-L mission</a>. During the first 3 seconds of liftoff the <a href="http://en.wikipedia.org/wiki/O-ring">o-rings</a> (o-shaped loops used to connect two cylinders) in the shuttle's right-hand <a href="http://en.wikipedia.org/wiki/Space_Shuttle_Solid_Rocket_Booster">solid rocket booster</a> (SRB) failed. As a result hot gases with temperatures above 5,000 &#176;F leaked out of the booster, vaporized the o-rings, and damaged the SRB's joints. The shuttle started its ascent, but seventy two seconds later the compromised SRB pulled away from the Challenger, leading to sudden lateral acceleration. Pilot Michael J. Smith uttered &quot;Uh oh&quot; just before the shuttle broke up. Torn apart by excessive force, it disintegrated rapidly. Within seconds the severed but nearly intact crew cabin began to free fall and seven astronauts plunged to their deaths. I was a child then and remember watching in horror as Brazilian TV showed the footage.</p>  <p><img style="margin: 6px" height="191" alt="Challenger Explosion" src="http://static.duartes.org/img/blogPosts/ChallengerExplosion.jpg" width="300" align="right" />At the time I didn't know that SRB engineers had previously warned about problems in the o-rings, but had been dismissed by NASA management. I also didn't know who Richard Feynman or Ronald Reagan were. It turns out that President Reagan created the <a href="http://en.wikipedia.org/wiki/Rogers_Commission">Rogers Commission</a> to investigate the disaster. Physicist Feynman was invited as a member, but his independent intellect and direct methods were at odds with the commission's formal approach. Chairman Rogers, a politician, remarked that Feynman was &quot;becoming a real pain.&quot; In the end the commission produced a report, but Feynman's rebellious opinions were kept out of it. When he threatened to take his name out of the report altogether, they agreed to include his thoughts as <a href="http://www.ralentz.com/old/space/feynman-report.html">Appendix F - Personal Observations on Reliability of Shuttle</a>.</p>  <p>It is a good thing it was included, because the 10-page document is a work of brilliance. It has deep insights into the nature of engineering and into how reliable systems are built. And you see, I didn't put 'software' in the title just to trick you. Feynman's conclusions are general and very much relevant for software development. After all, as Steve McConnell <a href="http://blogs.construx.com/blogs/stevemcc/archive/2007/06/23/quot-engineering-quot-in-software.aspx">tirelessly</a> <a href="http://blogs.construx.com/blogs/stevemcc/archive/2007/06/28/software-engineering-ignorance-part-ii.aspx">points out</a>, there is much in common between software and other engineering disciplines. But don't take my word for it. Take Feynman's:</p>  <blockquote>   <p>The Space Shuttle Main Engine was handled in a different manner, <strong>top down, we might say</strong>. The engine was designed and put together all at once with relatively little detailed preliminary study of the material and components. Then <strong>when troubles are found</strong> in the bearings, turbine blades, coolant pipes, etc., <strong>it is more expensive and difficult to discover the causes and make changes</strong>. </p> </blockquote>  <p>So software is not the only discipline where the longer a defect stays in the process, <a href="http://stevemcconnell.com/ieeesoftware/eic17.htm">the more expensive it is to fix.</a> It's also not the only discipline where a &quot;top down&quot; design, made in ignorance of detailed bottom-up knowledge, leads to problems. There is however a difference here between <em>design</em> and <em>requirements</em>. The requirements for the engine were clear and well defined. You know, go to space and back, preferably without blowing up. Feynman is arguing not so much against Joel's <a href="http://www.joelonsoftware.com/articles/fog0000000036.html">functional specs</a>, but rather against top down <em>design</em> such as that advocated by the <a href="http://martinfowler.com/bliki/UmlAsBlueprint.html">UML as blueprint</a> crowd. On goes Feynman:</p>  <blockquote>   <p>     <br />The Space Shuttle Main Engine is a very remarkable machine. It has a greater ratio of thrust to weight than any previous engine. It is built at the edge of, or outside of, previous engineering experience. Therefore, as expected, many different kinds of flaws and difficulties have turned up. <strong>Because, unfortunately, it was built in the top-down manner, they are difficult to find and fix.</strong> The design aim of a lifetime of 55 missions equivalent firings (27,000 seconds of operation, either in a mission of 500 seconds, or on a test stand) has not been obtained. The engine <strong>now requires very frequent maintenance</strong> and replacement of important parts, such as turbopumps, bearings, sheet metal housings, etc.       <br /></p> </blockquote>  <p align="center">   <br /><img style="margin: 4px" height="248" alt="Richard Feynman" hspace="hspace" src="http://static.duartes.org/img/blogPosts/feynman.jpg" width="200" vspace="vspace" /></p>  <p>Unfortunate top down manner, difficult to find and fix, failure to meet design requirements, frequent maintenance. Sound familiar? Is software engineering really a world apart, removed from its sister disciplines? Feynman elaborates on the difficulty in achieving correctness due to the 'top down' approach:</p>  <blockquote>   <p>     <br />Many of these solved problems are the early difficulties of a new design. Naturally, one can never be sure that all the bugs are out, and, for some, <strong>the fix may not have addressed the true cause</strong>.      <br /></p> </blockquote>  <p>Whether it's the Linux kernel or shuttle engines, there are fundamental cross-discipline issues in design. One of them is the folly of a top-down approach, which ignores the reality that detailed knowledge about the bottom parts is a <em>necessity</em>, not something that can be abstracted away. He then talks about the avionics system, which was done by a different group at NASA:</p>  <blockquote>   <p>     <br />The software is checked very carefully in a bottom-up fashion. First, <strong>each new line of code is checked, then sections of code or modules with special functions are verified</strong>. The scope is increased <strong>step by step</strong> until the new changes are incorporated into a complete system and checked. This complete output is considered the final product, newly released. But completely independently there is an independent verification group, that <strong>takes an adversary attitude</strong> to the software development group, and tests and verifies the software as if it were a customer of the delivered product.       <br /></p> </blockquote>  <p>Yes, go ahead and pinch yourself: this is unit testing described in 1986 by the Feynman we know and love. Not only unit testing, but 'step by step increase' in scope and 'adversarial testing attitude'. It's common to hear we suck at software because it's a &quot;young discipline&quot;, as if the knowledge to do right has not yet been attained. Bollocks! We suck because we <a href="http://www.stevemcconnell.com/cc.htm">constantly</a> <a href="http://www.stevemcconnell.com/psd.htm">ignore</a> well-established, <a href="http://www.joelonsoftware.com/articles/fog0000000043.html">well-known</a>, <a href="http://www.stevemcconnell.com/rd.htm">empirically proven practices</a>. In this regard management is also to blame, especially when it comes to dysfunctional schedules, wrong incentives, poor hiring, and demoralizing policies. Management/engineering tensions and the effects of bad management are keenly discussed by Feynman in his report. Here is one short example:</p>  <blockquote>   <p>     <br />To summarize then, the computer software checking system and attitude is of the highest quality. There appears to be <strong>no process of gradually fooling oneself while degrading standards</strong> so characteristic of the Solid Rocket Booster or Space Shuttle Main Engine safety systems. To be sure, there have been <strong>recent suggestions by management to curtail such elaborate and expensive tests as being unnecessary</strong> at this late date in Shuttle history.       <br /></p> </blockquote>  <p>This is one of many passages. I picked it because it touches on other points, such as the 'attitude of highest quality' and the 'process of gradually fooling oneself'. I encourage you to read the <a href="http://www.ralentz.com/old/space/feynman-report.html">whole report</a>, unblemished by yours truly. With respect to software, I take out four main points:</p>  <ul>   <li>Engineering can only be as good as its relationship with management </li>    <li>Big design up front is foolish </li>    <li>Software has much in common with other engineering disciplines </li>    <li>Reliable systems are built by rigorously tested, incremental bottom-up engineering with an 'attitude of highest quality' </li> </ul>  <p>There are other interesting themes in there, and Feynman's insight can't be captured in a few bullet points, much less by me. What do <em>you</em> get out of it?</p>  <p align="center">   <br /><img height="299" alt="Feynman&#39;s last board at Caltech" src="http://static.duartes.org/img/blogPosts/feynmanLastBoard.gif" width="463" /></p>

[64 Comments](/comments/feynman-engineering.html)
