---
title: Lucky to be a Programmer
comments: false
date: 2008-07-14 01:46:24 -06:00
categories:
- [programming]
---
<p> For the past few weeks I've been working with a fellow developer on a project that required an all-out programming effort. It's done now, so we're back to a regular schedule, but when people hear about the crazy hours they often say they're sorry. They really shouldn't be. I would never do this often, or for long periods, or without proper compensation if done for an employer, but the truth is that these programming blitzkriegs are some of my favorite periods in life. Under the right conditions, writing software is so intensely pleasurable it should be illegal. </p>  <p> Many programmers relate to this, but others are taken aback when they hear it.  I think it's because institutions are so good at squeezing the fun out of  everything. It's appalling for example how schools can take the most vibrant topics and mangle them into formulaic, mediocre slog. And so it is for programming. Many corporations turn an inherently rewarding experience into something people just barely stomach in exchange for a paycheck. </p>  <p> That's too bad. Few things are better than spending time in a creative haze, consumed by ideas, watching your work  come to life, going to bed eager to wake up quickly and go try things out.  I am not suggesting that excessive hours are needed or even advisable; a sane schedule is a must except for  occasional binges. The point is that programming is an intense creative pleasure, a perfect mixture of puzzles, writing, and craftsmanship. </p>  <p> Programming offers intriguing challenges and ample room for invention. Some problems are investigative and reductionist: Why is this code running slowly? What on earth is causing that bug? Others are constructive, like devising algorithms and architectures. All of them are a delight if you enjoy analytical work, immersed in a world full of beasts like malware, routers, caches, protocols, databases, graphs, and numbers. </p>  <p> This analytical side is what most people associate with programming. It does make it interesting, like a complex strategy game. But in most software the primary challenge is <i>communication</i>: with fellow programmers via code and with users via interfaces. By and large, writing code is more essay than puzzle. It is shaping  your ideas and schemes into a coherent body; it is seeking clarity, simplicity and conciseness. Both code and interfaces abound with the simple joy of creation. </p>  <p> Another source of pleasure is that under certain conditions, <i>beauty</i> arises in programming. It may sound like bullshit but it's real, the kind of thing that makes your day better. Take for example Euclid's 2-line proof that  <a href="http://primes.utm.edu/notes/proofs/infinite/euclids.html">prime numbers are infinite</a>. I think many would find it beautiful - so succint and such a fascinating result.  This is the beauty of math, <a href="http://www.quotationspage.com/quote/26185.html">cold and austere</a>, and it pervades software. It is in clever algorithms like <a href="http://en.wikipedia.org/wiki/Quicksort">quicksort</a>, in the sources of kernels and compilers, in <a href="http://www.matasano.com/log/1032/this-new-vulnerability-dowds-inhuman-flash-exploit/">elegant exploits</a> and in the tricks we pull to solve everyday problems. When you see these solutions, be it famous algorithm or mundane trick, you smile and think "how smart" and it feels good. How noble in reason! </p>  <p> A non-math sort of beauty also exists in code, analogous to eloquence in discourse.  It's present in well-factored software that does a lot with little code, in short and crisp methods, in well-done architectures. Some languages make this hard and not all programmers produce it, but it's a joy to read and work on such code. If you're working in an expressive language with coworkers whose code you enjoy, it happens often enough to brighten things up. </p>  <p> Now for craftsmanship. In a sense software is abstract - where does program behavior exist but in our minds? Yet we call it <i>building</i> software for a reason. Programs are shaped feature by feature, architectures start out as scaffolds and grow, user interfaces come together, bugs are fixed and hotspots are optimized to make things run fast. Software provides a deeply satisfying sense of craft.   We <i>build</i> stuff out of pure ideas and then get to watch it   <i>working</i> to solve real problems and make people a little better off. Or far better off, as the case may be. </p>  <p> Take Biology.  Despite nearly 400 years of scientific revolution, Biology has been unable to deliver on crucial problems like effective cures for viral infections or cancer. Some of our best progress, like antibiotics, has been due to chance and random experimentation. You start a clinical trial for a hypertension drug and suddenly - whoah - all your subjects have hard-ons! Viagra <a href="http://en.wikipedia.org/wiki/Viagra#History">is born</a>. To be sure, chance plays a role in all endeavours, but  Physics and Chemistry have a comprehensive theoretical basis powering systematic improvements, whereas Biology has been largely confined to kludges. Wanna treat cancer? Here, blast the patient with radiation and poison and hopefully the cancer will die first. They're brilliant kludges, and I'm happy to have them, but it's a far cry from the precision we've had elsewhere. </p>  <p> Software is changing that. Just barely 50 years ago the shape of DNA was being discovered, but now anyone can browse and download <a href="http://www.ncbi.nlm.nih.gov/sites/entrez?term=seqstat_complete&amp;cmd=Search&amp;db=genomeprj">hundreds 	of complete genome sequences</a>. Or look up <a href="http://www.ncbi.nlm.nih.gov/sites/entrez?db=genome">thousands of genes</a>  (<a href="http://www.ncbi.nlm.nih.gov/sites/entrez?Db=gene&amp;Cmd=ShowDetailView&amp;TermToSearch=9940&amp;ordinalpos=10&amp;itool=EntrezSystem2.PEntrez.Gene.Gene_ResultsPanel.Gene_RVDocSum">DLEC1</a> for a random example), complete with nucleotide sequence, amino-acid sequence for expressed proteins, literature mentioning the gene, you name it! Or you can <a href="http://blast.ncbi.nlm.nih.gov/Blast.cgi">search</a> vast gene and protein databases for nucleotide or amino-acid sequences, perhaps after sequencing something in ever-cheaper devices, and get a comprehensive report on the match. It doesn't matter if they're exact, because the algorithm in <a href="http://en.wikipedia.org/wiki/BLAST">BLAST</a>, the standard sequence search tool, delivers partial maches across databases and species, scored by match likelihood. These advances will enable massive breakthroughs in medicine. Biology is entering a new era, like Physics in the 18th century, propelled by software.  </p>  <p> Yea, sure, biologists have a minor role :P, but we in computing increasingly power major developments in science, culture, and business. When a third-world kid looks up a Wikipedia entry, it's our work too! We wrote the RFCs and the networking stacks, the browser and MediaWiki, the OSes and the HTTP servers. Not to mention a lot of the Wikipedia entries, but since a few were on company time I'll leave them aside. The influence of technologists goes beyond bits and bytes: it was <a href="http://en.wikipedia.org/wiki/Ward_Cunningham">a programmer</a> who invented wikis and <a href="http://en.wikipedia.org/wiki/Blogging#Origins">our community</a> started blogs. <a href="http://en.wikipedia.org/wiki/Henry_Mencken">Henry Mencken</a> pointed out correctly that "freedom of the press is limited to those who own one".  It's a pity he's not around to watch our  creations break down the stifling conformity and cozy subservience of professional journalism. Less glamorously but to great benefit our applications have delivered steep productivity gains to businesses across the economy. These are a few examples in a long list. </p>  <p> Three years ago, when I finished my undergrad (after being a programmer for many years), I was about to enter med school. At that point, a couple of negative experiences had me somewhat burned out on computer work. I'm happy I stuck with it. I'm still interested in biomedical research, but if I were to get involved I'd rather come in from the software angle, because frankly it's too much fun to pass on. My mom thinks I'm a typist but oh well. </p>  <p> If you find yourself stuck in a place that's killing your innate passion for technology, by all means, move the hell on!  Don't stay put while your enthusiasm is slowly drained.  It's hard to find motivated people to hire so you've got a major asset already; there are plenty of employers - and companies to be started - that will better suit you.  For people who think they might like programming, your mileage may vary, but I highly recommend it as a career. Not only  is the <a href="http://www.bls.gov/oco/ocos267.htm">outlook bullish</a> on the job front, but as the role of software grows in society we'll see more exciting and beneficial changes delivered by technology. I'm delighted to be along for the ride as constantly <a href="http://www.youtube.com/watch?v=1A0BmbiM53Q">my art and craft I try to master</a>. </p>  <p> PS: thanks for putting up with the irregular posting schedule. The plan is to stick to regular posting now that things have calmed down. And if you like the song, download the mp3 because the YouTube audio doesn't do it justice. </p>

[192 Comments](/comments/lucky-programmer.html)
